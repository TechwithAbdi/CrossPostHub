generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  posts       Post[]
  planId      String?       @default("cm6au8r5a0000qx5cd3my4bjx")
  plan        Plan?         @relation(fields: [planId], references: [id])
  transaction Transaction[]
}

model Account {
  userId              String
  type                String
  provider            String
  providerAccountId   String
  refresh_token       String?
  access_token        String?
  access_token_secret String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Post {
  id        String   @unique @default(cuid())
  text      String?
  provider  String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id          String        @unique @default(cuid())
  name        String?
  price       Float?
  users       User[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  transaction Transaction[]
}

enum STATUS {
  PENDING
  SUCCESS
  FAILED
}

model Transaction {
  id        String   @unique @default(cuid())
  userId    String
  planId    String
  status    STATUS
  amount    Int
  order_id  String   @unique 
  user      User     @relation(fields: [userId], references: [id])
  plan      Plan     @relation(fields: [planId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
