generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum STATUS {
  SUCCESS
  FAILED
  PENDING
  REFUNDED
  CANCELLED
  PAUSED
}

// TODO: Add more statuses as needed
enum NOTIFICATION_TYPE {
  POST_STATUS_PROCESSING
  POST_STATUS_SUCCESS
  POST_STATUS_FAILED
  SYSTEM_ALERT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  posts          Post[]
  planId         String?
  transactions   Transaction[]
  notifications  Notification[]
  subscriptions  Subscription[]
  generatedImages GeneratedImage[]
}

model Account {
  userId                 String
  type                   String
  provider               String
  providerAccountId      String
  refresh_token          String?
  access_token_iv        String?
  access_token_secret_iv String?
  refresh_token_iv       String?
  access_token           String?
  access_token_secret    String?
  expires_at             Int?
  token_type             String?
  scope                  String?
  id_token               String?
  session_state          String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@id([provider, providerAccountId])
}

enum POST_STATUS {
  PENDING
  FAILED
  SUCCESS
}

model Post {
  id           String      @unique @default(cuid())
  text         String?
  provider     String?
  userId       String
  mediaKeys    String[]
  scheduledFor DateTime?
  isScheduled  Boolean     @default(false)
  status       POST_STATUS @default(PENDING)
  user         User        @relation(fields: [userId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

model GeneratedImage {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  prompt   String?
  // vectorEmbedding String?
  url       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Plan {
  id             String         @id @default(uuid())
  title          String
  price          Float
  description    String
  features       String[]
  cta            String
  razorpayPlanId String?        @unique // Razorpay Plan ID (optional for Free plan)
  subscriptions  Subscription[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Subscription {
  id                     String        @id @default(uuid())
  userId                 String
  user                   User          @relation(fields: [userId], references: [id])
  planId                 String
  plan                   Plan          @relation(fields: [planId], references: [id])
  razorpaySubscriptionId String? // Razorpay Subscription ID (optional for Free plan)
  status                 String // e.g., "active", "paused", "cancelled"
  nextBillingAt          DateTime? // Next billing date
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt
  transactions           Transaction[]
}

model Transaction {
  id             String        @id @default(uuid())
  userId         String
  user           User          @relation(fields: [userId], references: [id])
  subscriptionId String?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])
  order_id       String?
  paymentId      String?
  amount         Float?
  status         STATUS
  paymentMethod  String? // upi, card, netbanking, etc.
  invoiceId      String?
  captured       Boolean?      @default(false)
  description    String?
  failureReason  String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([subscriptionId])
  @@index([paymentId])
}

model Notification {
  id        Int               @id @default(autoincrement())
  userId    String
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      NOTIFICATION_TYPE
  message   String
  read      Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
